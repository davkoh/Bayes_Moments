clear all
close all
clc

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% This file computes the results for Table III & Figures I, II and III
%%% Change iForce to select the forcing variable
%%% The estimation results for Table III are stored in:
%%% mRes : for the unrestricted parameter estimates [ iv_est  , lower 90, upper 90, lower 95 , upper 95 ]
%%% mResR: for the   restricted parameter estimates [ cue_est , lower 90, upper 90, lower 95 , upper 95 ]
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

mData          = xlsread('Data_QJE.xlsx');                        % load data

vPia           = mData(:,4);                                      % inflation         (4 == pix)

iForce         = 1;                                               % select the forcing variable: 0 is ygap -- 1 is ugap

if iForce == 0
    vXa            = mData(:,5);                                  % selects ygap
    vScale         = [-0.5 2];                                    % x-axis for figures
end
if iForce == 1
    vXa            = mData(:,6);                                  % selects ugap
    vScale         = [-2 0.5];                                    % x-axis for figures
end

vPiF           = 0.25 * (lagmatrix(vPia,-1) + lagmatrix(vPia,-2) + lagmatrix(vPia,-3) + lagmatrix(vPia,-4)); % future inflation
vPiL           = 0.25 * (lagmatrix(vPia, 1) + lagmatrix(vPia, 2) + lagmatrix(vPia, 3) + lagmatrix(vPia, 4)); % lagged inflation

vIV            = mData(:,7);                                      % select RR instruments
iL             = 20;                                              % number of instruments

mZ             = [vIV NaN(size(vPia,1),iL)];                      % construct lagged shock instrument matrix
for j = 1:iL
    mZ(:,j+1)  = lagmatrix(vIV,j);
end

mObs           = rmmissing([vPia vPiL vPiF vXa mZ]);              % group all observations and drop missing values

iT             = size(mObs,1);                                    % effective sample size

vY             = mObs(:,1) - mean(mObs(:,1),1);                   % demeaned dependent var
mW             = mObs(:,2:4) - mean(mObs(:,2:4),1);               % demeaned endogenous vars

vYT            = vY - mW(:,1);		                              % dependent var under \gamma_b + \gamma_f = 1
mWT            = [(mW(:,2) - mW(:,1)) mW(:,3)];                   % endogenous vars	under \gamma_b + \gamma_f = 1

mZ             = mObs(:,5:5+iL);                                  % instruments
vR             = 0:1:iL;
mZp            = [sum(mZ,2) sum(mZ .* vR,2) sum(mZ .* vR.^2,2)];  % polynomial instrument matrix

iMaxLag        = floor(4*(iT/100)^(2/9))+1;                       % lag length
vQS            = [1 ; zeros(iT-1,1)];                             % init quadratic spectral kernel
for l=2:iMaxLag
    dX         = (l-1) / (1 + iMaxLag);
    vQS(l)     = (25 / (12 * pi^2 * dX^2)) * ( sin(6*pi * dX /5)/ (6*pi * dX /5) - cos(6*pi * dX /5) );  % quadratic spectral kernel
end
mK         = toeplitz(vQS);                                       % toeplitz weight matrix

% baseline IV estimates
vDelta         = inv(mZp'*mW) * mZp' * vY;                        % simple iv estimates
vInit          = vDelta(2:3);
[vDeltaR dCueValue]  = fCUErestricted(vInit, vYT, mWT, mZp, iT, mK);  % cue estimates under restriction

%Compute subset confidence bounds based on AR_{a,s} statistic
mRes           = [vDelta zeros(3,4)];                             % storage unrestricted
mResR          = [vDeltaR zeros(2,4)];                            % storage restricted
dGS            = 0.01;                                            % grid size

vPL            = (-10:dGS:10)';                                   % grid lagged inflation
vAR            = zeros(size(vPL,1),1);
for i = 1:size(vPL,1)
    vAR(i)    = fSubSet2(vPL(i), vY, mW(:,1), mW(:,2:3), mZp, iT, mK);   % subset statistic
end
mRes(1,2:5)    = [ vPL(find(vAR < chi2inv(0.9,1),1,'first')) vPL(find(vAR < chi2inv(0.9,1),1,'last')) vPL(find(vAR < chi2inv(0.95,1),1,'first')) vPL(find(vAR < chi2inv(0.95,1),1,'last'))]; % find bounds

vPG            = (-10:dGS:10)';                                   % inflation expectations
vAR            = zeros(size(vPG,1),1);
vAR_res        = zeros(size(vPG,1),1);
for i = 1:size(vPG,1)
    vAR(i)     = fSubSet2(vPG(i), vY, mW(:,2), [mW(:,1) mW(:,3)], mZp, iT, mK);  % subset statistic
    vAR_res(i) = fSubSet2(vPG(i), vYT,  mWT(:,1), mWT(:,2), mZp, iT, mK);        % subset statistic under restriction
end
mRes(2,2:5)    = [vPG(find(vAR < chi2inv(0.9,1) ,1,'first')) vPG(find(vAR < chi2inv(0.9,1),1,'last')) vPG(find(vAR < chi2inv(0.95,1) ,1,'first')) vPG(find(vAR < chi2inv(0.95,1),1,'last'))];
mResR(1,2:5)   = [vPG(find(vAR_res < chi2inv(0.9,1),1,'first')) vPG(find(vAR_res < chi2inv(0.9,1),1,'last')) vPG(find(vAR_res < chi2inv(0.95,1),1,'first')) vPG(find(vAR_res < chi2inv(0.95,1),1,'last'))];


vPF            = (-10:dGS:10)';                                       % forcing variable
vAR            = zeros(size(vPF,1),1);
vAR_res        = zeros(size(vPF,1),1);
for i = 1:size(vPF,1)
    vAR(i)     = fSubSet2(vPF(i), vY , mW(:,3) , mW(:,1:2), mZp, iT, mK); % subset statistic
    vAR_res(i) = fSubSet2(vPF(i), vYT, mWT(:,2), mWT(:,1) , mZp, iT, mK); % subset statistic under restriction
end
mRes(3,2:5)    = [vPF(find(vAR< chi2inv(0.9,1),1,'first')) vPF(find(vAR< chi2inv(0.9,1),1,'last')) vPF(find(vAR< chi2inv(0.95,1),1,'first')) vPF(find(vAR< chi2inv(0.95,1),1,'last'))];
mResR(2,2:5)   = [vPF(find(vAR_res< chi2inv(0.9,1),1,'first')) vPF(find(vAR_res< chi2inv(0.9,1),1,'last')) vPF(find(vAR_res< chi2inv(0.95,1),1,'first')) vPF(find(vAR_res< chi2inv(0.95,1),1,'last'))];

% joint region lagged inflation and expected inflation
vPGL           = (-0.5:dGS:1.5)';                       % range for lagged inflation
vPG            = (-0.5:dGS:1.5)';                       % range for inflation expectation
mAR_BF         = zeros(size(vPG,1),size(vPGL,1));       % storage unrestricted AR statistic
mTest_BF       = zeros(size(vPG,1),size(vPGL,1));       % storage unrestricted test outcome
for i = 1:size(vPG,1)
    for j=1:size(vPGL,1)
        mAR_BF(i,j)       = fSubSet2([vPG(i) vPGL(j)]' , vY , mW(:,1:2) , mW(:,3), mZp, iT, mK);  % subset statistic
        
        if mAR_BF(i,j) < chi2inv(0.95,2)                % 95% confidence
            mTest_BF(i,j)   = 1;
        end
        if mAR_BF(i,j) < chi2inv(0.90,2)                % 90% confidence
            mTest_BF(i,j)   = 2;
        end
        if mAR_BF(i,j) < chi2inv(0.67,2)                % 67% confidence
            mTest_BF(i,j)   = 3;
        end
    end
end

map=[];                        % set shades of grey
map(1,:) = [1 1 1 ];
map(2,:) = [.9 .9 .9];
map(3,:) = [.7 .7 .7];
map(4,:) = [.3 .3 .3];


figure,                % make the figure
figure1 = figure(1);
set(0,'defaulttextInterpreter','latex')
imagesc(vPGL,vPG,mTest_BF'),colormap(figure1, map);
axis('xy')
line([0 0],[-10 10],'LineStyle','--','Color',[.5 .5 .5],'LineWidth',.5);
line([-10 10],[0 0],'LineStyle','--','Color',[.5 .5 .5],'LineWidth',.5);
hold on
h(1) =plot(vDelta(1),vDelta(2), 'o','MarkerSize',5,'Color',[.85 .33 .1],'MarkerFaceColor',[.85 .33 .1],'LineWidth',1);
xx=-2:dGS:2;
h(2)=plot(xx,1-xx,'--k','LineWidth',2);
%lg=legend(h,{['IV_a-',char(949)]},'Location','NorthEast','Fontsize',6)
box off
annotation(figure1,'textarrow',[0.333928571428571 0.269642857142857],...
    [0.845238095238095 0.797619047619049],'String',{'\gamma_b+\gamma_f=1'});
title('Confidence region ($AR_{a,s}$ test)')
xlabel('$\gamma_b$');
ylabel('$\gamma_f$');
set(gca,'linewidth',.15)
set(gca, 'xtick',-6:1:6)
set(gca, 'ytick',-6:1:6,'LineWidth',0.15)
set(gca,'Layer','top')
if iForce == 0
    print('FiguresQJE/ConfSets_RR_Y_unres_gammab','-depsc','-painters');
end
if iForce == 1
    print('FiguresQJE/ConfSets_RR_U_unres_gammab','-depsc','-painters');
end

% joint region expected inflation and forcing variable
vPG            = (-0.5:dGS:2)';                     % range for inflation expectation
vPL            = (vScale(1):dGS:vScale(2))';        % range for forcing variable
mAR            = zeros(size(vPG,1),size(vPL,1));    % storage unrestricted AR statistic
mARres         = zeros(size(vPG,1),size(vPL,1));    % storage   restricted AR statistic
mTest          = zeros(size(vPG,1),size(vPL,1));    % storage unrestricted test outcome
mTestres       = zeros(size(vPG,1),size(vPL,1));    % storage   restricted test outcome
for i = 1:size(vPG,1)
    for j=1:size(vPL,1)
        vU          = vYT - mWT * [vPG(i) vPL(j)]';
        mPz         = mZp * inv(mZp'*mZp) * mZp' ;
        mMz         = eye(iT) - mPz;
        mARres(i,j) = vU' * mPz * vU / (iT^-1 * vU' * mMz * mK * mMz * vU);   % computes restricted statistic
        
        if mARres(i,j) < chi2inv(0.95,2)        % 95% confidence
            mTestres(i,j)   = 1;
        end
        if mARres(i,j) < chi2inv(0.90,2)        % 90% confidence
            mTestres(i,j)   = 2;
        end
        if mARres(i,j) < chi2inv(0.67,2)        % 67% confidence
            mTestres(i,j)   = 3;
        end
        
        mAR(i,j)    = fSubSet2([vPG(i) vPL(j)]' , vY , mW(:,2:3) , mW(:,1), mZp, iT, mK);   % computes unrestricted subset statistic
        if mAR(i,j) < chi2inv(0.95,2)          % 95% confidence
            mTest(i,j)   = 1;
        end
        if mAR(i,j) < chi2inv(0.90,2)          % 90% confidence
            mTest(i,j)   = 2;
        end
        if mAR(i,j) < chi2inv(0.67,2)          % 67% confidence
            mTest(i,j)   = 3;
        end
    end
end


figure,              % make the unrestricted figure
figure2 = figure(2);
set(0,'defaulttextInterpreter','latex')
imagesc(vPL,vPG,mTest),colormap(figure2, map);
axis('xy')
line([0 0],[-10 10],'LineStyle','--','Color',[.5 .5 .5],'LineWidth',.5);
line([-10 10],[0 0],'LineStyle','--','Color',[.5 .5 .5],'LineWidth',.5);
hold on
h(1) =plot(vDelta(3),vDelta(2), 'o','MarkerSize',5,'Color',[.85 .33 .1],'MarkerFaceColor',[.85 .33 .1],'LineWidth',1);
%lg=legend(h,{['IV_a-',char(949)]},'Location','NorthEast','Fontsize',6)
box off
title('Confidence region ($AR_{a,s}$ test)')
if iForce == 0
    xlabel('$\lambda_{\rm Y}$');
end
if iForce == 1
    xlabel('$\lambda_{\rm U}$');
end
ylabel('$\gamma_f$');
set(gca,'linewidth',.15)
set(gca, 'xtick',-6:1:6)
set(gca, 'ytick',-6:1:6,'LineWidth',0.15)
set(gca,'Layer','top');
if iForce == 0
    print('FiguresQJE/ConfSets_RR_Y_unres','-depsc','-painters');
end
if iForce == 1
    print('FiguresQJE/ConfSets_RR_U_unres','-depsc','-painters');
end




figure,             % make the restricted figure
figure3 = figure(3);
set(0,'defaulttextInterpreter','latex')
imagesc(vPL,vPG,mTestres),colormap(figure3, map);
axis('xy')
line([0 0],[-10 10],'LineStyle','--','Color',[.5 .5 .5],'LineWidth',.5);
line([-10 10],[0 0],'LineStyle','--','Color',[.5 .5 .5],'LineWidth',.5);
hold on
h(1) =plot(vDeltaR(2),vDeltaR(1), 'o','MarkerSize',5,'Color',[.85 .33 .1],'MarkerFaceColor',[.85 .33 .1],'LineWidth',1);
%lg=legend(h,{['IV_a-',char(949)]},'Location','NorthEast','Fontsize',6)
box off
title('Confidence region ($AR_{a}$ test)')
if iForce == 0
    xlabel('$\lambda_{\rm Y}$');
end
if iForce == 1
    xlabel('$\lambda_{\rm U}$');
end
ylabel('$\gamma_f$');
set(gca,'linewidth',.15)
set(gca, 'xtick',-6:1:6)
set(gca, 'ytick',-6:1:6,'LineWidth',0.15)
set(gca,'Layer','top')
if iForce == 0
    print('FiguresQJE/ConfSets_RR_Y_res','-depsc','-painters');
end
if iForce == 1
    print('FiguresQJE/ConfSets_RR_U_res','-depsc','-painters');
end



if iForce == 1   % for the unemployment gap make Figure III
    figure,
    figure4 = figure(4);
    mPar = [1 -1          ;
        1 vDeltaR(2)  ;
        1 0           ;
        vDeltaR(1) -1 ;
        vDeltaR(1) vDeltaR(2) ;
        vDeltaR(1) 0  ;
        0 -1          ;
        0 vDeltaR(2)  ;
        0 0           ];
    
    
    mIRF  = zeros(size(mPar,1),iL+1);
    mIRFs = zeros(size(mPar,1),iL+1);
    for j=1:size(mPar,1)
        vYtilde    = vYT - mWT * mPar(j,:)';
        vAlpha     = (inv(mZp'*mZp) * mZp' * vYtilde)';
        
        mIRF(j,:)  = (inv(mZ'*mZ) * mZ' * vYtilde)';
        mIRFs(j,:) = vAlpha(1) + vAlpha(2) * vR + vAlpha(3) * vR.^2;
        
        sbp2=subplot(3,3,j), hold on
        plot(0*mIRF(j,:),'--','Color',[.5 .5 .5],'LineWidth',.5);
        h(1)=plot(mIRF(j,:) ,'Linewidth',1,'Color',[0.0 0.5 0.8],'LineStyle','-');
        h(2)=plot(mIRFs(j,:),'Linewidth',1,'Color',[0.8 0.2 0.2],'LineStyle','--');
        ylim([-.7 .7]), xlim([1 iL])
        if j==1
            ylabel('$\gamma_f=1$','interpreter','Latex');
            title('$\lambda_U=-1$','FontWeight','normal');
        end
        if j==2
            title(['$\lambda_U=$',num2str(round(vDeltaR(2),2))], 'FontWeight','normal');
            legend(h,{'IR','sIR'},'Orientation','Vertical','Location','South','Fontsize',5,'Interpreter','Latex'); legend boxoff
        end
        if j==3
            title('$\lambda_U=0$','FontWeight','normal');
        end
        if j==4
            ylabel(['$\gamma_f=$',num2str(round(vDeltaR(1),2))],'interpreter','Latex');
        end
        
        if j==5
            title('2SLS estimate','FontSize',7)
        end
        
        set(gca, 'xtick',1:4:iL)
        set(gca, 'xticklabel',[])
        set(gca, 'ytick',-20:.5:20,'Fontsize',7), %set(gca, 'yticklabel',-20:2:20)
        if j==7
            ylabel('$\gamma_f=0$','interpreter','Latex');
            set(gca, 'xticklabel',0:4:iL), xlabel('Quarters','FontSize',8),
        end
        if j==8
            set(gca, 'xticklabel',0:4:iL), xlabel('Quarters','FontSize',8),
        end
        if j==9
            set(gca, 'xticklabel',0:4:iL), xlabel('Quarters','FontSize',8),
        end
        
    end
    print('FiguresQJE/ImpulseResponses','-depsc','-painters');
    
    figure5=figure(5);
    set(0,'defaulttextInterpreter','latex')
    axes1 = axes('Parent',figure5);
    hold on, box off
    im=imagesc(vPL,vPG, mARres); % colormap('gray');
    plot(mPar(:,2), mPar(:,1),'o','MarkerSize',2,'Color',[.85 .33 .1],'MarkerFaceColor',[.85 .33 .1],'LineWidth',1);
    xlabel('$\lambda_U$'),ylabel('$\gamma_f$')
    title('$AR_a$ statistic');
    set(gca,'linewidth',.15)
    set(gca, 'xtick',-4:1:4,'LineWidth',0.15)
    set(gca, 'ytick',-4:1:4,'LineWidth',0.15)
    ylim([-.5 2]), xlim([-2 .5])
    set(gca,'Layer','top');
    set(axes1,'Colormap',...
    [0.2422 0.1504 0.6603;0.245771428571429 0.1558 0.68096;0.249105714285714 0.162222857142857 0.700185714285714;0.252302857142857 0.169145714285714 0.718511428571429;0.255337142857143 0.176245714285714 0.736548571428571;0.258371428571429 0.183114285714286 0.754771428571429;0.261294285714286 0.189745714285714 0.773145714285714;0.26416 0.1964 0.79152;0.266828571428571 0.203091428571429 0.8094;0.269322857142857 0.210154285714286 0.826562857142857;0.271514285714286 0.217742857142857 0.842571428571429;0.273497142857143 0.22576 0.85736;0.275105714285714 0.234188571428571 0.870914285714286;0.276531428571429 0.243045714285714 0.883374285714286;0.27782 0.25214 0.8947;0.278971428571429 0.261371428571429 0.905185714285714;0.279788571428571 0.270642857142857 0.91484;0.280462857142857 0.280014285714286 0.923751428571429;0.280968571428571 0.289385714285714 0.932111428571429;0.281302857142857 0.298657142857143 0.939825714285714;0.2814 0.307928571428571 0.9471;0.28122 0.31716 0.95396;0.280882857142857 0.326362857142857 0.960308571428571;0.280391428571429 0.335465714285714 0.966222857142857;0.27948 0.344568571428571 0.971617142857143;0.278285714285714 0.353671428571429 0.9767;0.276771428571429 0.362857142857143 0.981254285714286;0.274731428571429 0.372128571428571 0.985131428571429;0.27228 0.38152 0.98844;0.269317142857143 0.39096 0.99104;0.265685714285714 0.400557142857143 0.993028571428571;0.261328571428571 0.410265714285714 0.994831428571429;0.2558 0.419968571428571 0.996442857142857;0.248934285714286 0.429745714285714 0.997965714285714;0.240671428571429 0.439654285714286 0.999257142857143;0.2311 0.4497 0.9995;0.220817142857143 0.460082857142857 0.997334285714286;0.210497142857143 0.470465714285714 0.993982857142857;0.20028 0.480631428571428 0.990491428571429;0.191508571428572 0.490408571428571 0.987214285714286;0.185957142857143 0.499857142857143 0.983328571428572;0.182951428571429 0.509017142857143 0.978991428571429;0.18084 0.51804 0.97436;0.179014285714286 0.526925714285714 0.969345714285714;0.177714285714286 0.535791428571428 0.963431428571429;0.176871428571429 0.544471428571428 0.9566;0.175911428571429 0.553114285714285 0.949265714285714;0.173451428571429 0.561642857142857 0.942308571428572;0.168857142857143 0.570071428571428 0.936008571428572;0.16256 0.5785 0.93026;0.156357142857143 0.586771428571428 0.924371428571429;0.151377142857143 0.594862857142857 0.918302857142857;0.148082857142857 0.602722857142857 0.912465714285715;0.145585714285714 0.610477142857142 0.906971428571429;0.14284 0.618131428571428 0.902131428571429;0.139014285714286 0.625885714285714 0.898157142857143;0.13408 0.63354 0.89446;0.1285 0.641185714285714 0.890802857142857;0.122677142857143 0.648694285714285 0.886771428571429;0.116991428571429 0.656065714285714 0.882028571428572;0.111414285714286 0.6633 0.876485714285715;0.105434285714286 0.670297142857142 0.870168571428572;0.0985857142857147 0.677005714285714 0.863037142857143;0.0902200000000006 0.68354 0.85522;0.0796542857142864 0.689777142857143 0.846782857142858;0.066442857142858 0.695742857142857 0.837814285714286;0.0508771428571439 0.701448571428571 0.828434285714286;0.0334000000000011 0.706917142857142 0.818637142857144;0.0184342857142866 0.712185714285714 0.808628571428572;0.0046 0.7192 0.7941;0.00259677419354841 0.721277419354839 0.789425806451613;0.00141612903225808 0.723354838709677 0.784751612903226;0.00110322580645159 0.725409677419355 0.780077419354839;0.00177096774193546 0.727412903225806 0.775403225806452;0.00378709677419345 0.729345161290322 0.770658064516129;0.00676774193548367 0.731274193548387 0.765864516129033;0.0107161290322577 0.733183870967742 0.761041935483871;0.0157612903225803 0.735038709677419 0.75621935483871;0.0223645161290317 0.736825806451613 0.751329032258065;0.0301645161290315 0.738606451612903 0.746432258064517;0.0390774193548377 0.740370967741935 0.74151935483871;0.0490935483870957 0.742077419354839 0.736548387096775;0.0590451612903214 0.743783870967742 0.731577419354839;0.0689096774193536 0.745451612903226 0.726567741935485;0.0786645161290311 0.747070967741935 0.721522580645162;0.0882354838709667 0.748629032258064 0.716477419354839;0.0974999999999991 0.750187096774193 0.711432258064517;0.106487096774193 0.751745161290322 0.706351612903226;0.115174193548386 0.753303225806451 0.701232258064517;0.123409677419354 0.754861290322581 0.696112903225807;0.131122580645161 0.756361290322581 0.690993548387097;0.138432258064516 0.757877419354839 0.685874193548387;0.145341935483871 0.759435483870968 0.680741935483871;0.151574193548387 0.760993548387097 0.675474193548387;0.157422580645161 0.762551612903226 0.670261290322581;0.162903225806452 0.764109677419355 0.665009677419355;0.168003225806452 0.765670967741935 0.659667741935484;0.172677419354839 0.767303225806452 0.654325806451613;0.177093548387097 0.768883870967742 0.648932258064516;0.181293548387097 0.770467741935484 0.643464516129032;0.1853 0.7721 0.6379;0.189158064516129 0.773732258064516 0.63226129032258;0.192870967741936 0.775364516129032 0.626525806451613;0.196506451612903 0.776996774193549 0.620716129032258;0.200141935483871 0.778629032258065 0.614854838709677;0.204416129032258 0.780190322580645 0.608851612903225;0.208674193548388 0.781703225806452 0.602796774193548;0.212961290322581 0.783206451612903 0.596674193548386;0.217412903225807 0.784764516129033 0.59044193548387;0.222270967741936 0.786254838709678 0.584074193548386;0.227503225806452 0.787654838709678 0.577609677419354;0.23313870967742 0.788990322580645 0.571064516129031;0.239296774193549 0.790325806451613 0.56446129032258;0.245906451612904 0.791596774193549 0.557793548387096;0.252893548387098 0.792780645161291 0.551038709677418;0.260267741935485 0.793880645161291 0.544187096774192;0.268132258064518 0.79491935483871 0.537212903225805;0.276487096774195 0.795896774193549 0.530238709677418;0.285158064516131 0.796790322580645 0.523193548387095;0.294090322580647 0.797596774193549 0.516070967741934;0.30321612903226 0.798338709677419 0.508948387096772;0.312400000000002 0.799022580645161 0.501651612903224;0.321632258064519 0.799658064516129 0.494306451612901;0.330893548387099 0.800245161290323 0.486941935483869;0.340019354838712 0.800764516129032 0.479374193548385;0.349200000000003 0.801283870967742 0.471641935483869;0.358370967741938 0.801745161290323 0.463822580645159;0.367500000000003 0.802116129032258 0.455948387096772;0.376700000000003 0.802487096774194 0.447861290322578;0.386003225806455 0.802754838709677 0.439722580645159;0.395429032258068 0.802951612903226 0.431535483870965;0.405000000000003 0.8031 0.423299999999997;0.414941935483874 0.803025806451613 0.415064516129029;0.425077419354842 0.802903225806452 0.40692580645161;0.435383870967746 0.802709677419355 0.398838709677416;0.445845161290327 0.802412903225806 0.390751612903223;0.456590322580649 0.801974193548387 0.3828064516129;0.467348387096779 0.801483870967742 0.374912903225803;0.478125806451617 0.800925806451613 0.367067741935481;0.488958064516134 0.800258064516129 0.359277419354835;0.499722580645166 0.799590322580645 0.351419354838706;0.510396774193553 0.798838709677419 0.343554838709674;0.52099032258065 0.798006451612903 0.335674193548383;0.531525806451618 0.797116129032258 0.327735483870964;0.541996774193553 0.79616129032258 0.319732258064512;0.552380645161295 0.795158064516128 0.311680645161286;0.562693548387102 0.794119354838709 0.303593548387093;0.573006451612908 0.79308064516129 0.295506451612899;0.583258064516134 0.791919354838709 0.287480645161286;0.593496774193554 0.790696774193548 0.279503225806447;0.603725806451618 0.789425806451612 0.271593548387093;0.613890322580651 0.788090322580644 0.263877419354834;0.623996774193554 0.786696774193548 0.256335483870964;0.634087096774199 0.785254838709677 0.248938709677415;0.644164516129038 0.783764516129031 0.241693548387093;0.654106451612909 0.782206451612902 0.234719354838706;0.66404838709678 0.780593548387096 0.227964516129028;0.673932258064522 0.778932258064515 0.221461290322577;0.683719354838716 0.777225806451612 0.215241935483867;0.693364516129038 0.775519354838709 0.2093064516129;0.702906451612909 0.773812903225805 0.203525806451609;0.712377419354845 0.772080645161289 0.197890322580642;0.721800000000006 0.770299999999999 0.192399999999997;0.73114838709678 0.768519354838708 0.187058064516125;0.740400000000006 0.766690322580644 0.181812903225803;0.749554838709684 0.764835483870966 0.176732258064513;0.75860645161291 0.762980645161289 0.171909677419352;0.767516129032264 0.761125806451612 0.167512903225803;0.776374193548393 0.759270967741934 0.163541935483868;0.785145161290329 0.757416129032257 0.16006451612903;0.793751612903232 0.755561290322579 0.157245161290321;0.802290322580651 0.753706451612902 0.155374193548386;0.810696774193555 0.751893548387095 0.154138709677419;0.818958064516135 0.750112903225805 0.153516129032258;0.827045161290329 0.748332258064515 0.153590322580645;0.83506774193549 0.746551612903224 0.154245161290323;0.843003225806458 0.744848387096773 0.155296774193549;0.850854838709684 0.743216129032257 0.15669677419355;0.858645161290329 0.741583870967741 0.158403225806453;0.866312903225813 0.740012903225805 0.16041612903226;0.873883870967748 0.738490322580644 0.162741935483873;0.881358064516135 0.737016129032257 0.165435483870971;0.888703225806458 0.735606451612902 0.16877419354839;0.895932258064522 0.734312903225805 0.172635483870971;0.903000000000006 0.733116129032257 0.177029032258069;0.909887096774199 0.732016129032257 0.181983870967747;0.916638709677425 0.731051612903225 0.187548387096779;0.923225806451619 0.730251612903225 0.193551612903231;0.92966774193549 0.729567741935483 0.199854838709683;0.935967741935489 0.728983870967742 0.206390322580651;0.942125806451619 0.728612903225806 0.21306774193549;0.948283870967748 0.728448387096774 0.219538709677425;0.954441935483877 0.728425806451613 0.225635483870973;0.960600000000006 0.7285 0.231200000000004;0.966758064516135 0.72901935483871 0.235725806451617;0.972819354838716 0.729780645161291 0.239477419354842;0.978625806451618 0.730987096774195 0.242432258064518;0.983967741935489 0.73291612903226 0.244509677419357;0.988316129032262 0.735483870967745 0.243393548387096;0.992077419354842 0.738396774193552 0.241319354838707;0.994987096774195 0.741687096774197 0.238567741935481;0.996470967741937 0.745470967741939 0.235377419354835;0.99693870967742 0.749525806451617 0.232254838709674;0.997141935483871 0.753648387096779 0.229138709677416;0.997183870967742 0.757819354838714 0.2260064516129;0.997109677419355 0.762048387096779 0.222816129032255;0.996970967741935 0.766277419354843 0.219625806451609;0.996783870967742 0.770506451612908 0.216435483870964;0.996548387096774 0.774748387096779 0.213245161290319;0.996251612903226 0.779051612903231 0.210054838709674;0.995893548387096 0.783354838709682 0.206925806451609;0.995416129032257 0.787693548387102 0.203845161290319;0.994793548387096 0.792070967741941 0.200832258064513;0.993977419354838 0.796448387096779 0.198012903225803;0.992929032258063 0.800883870967747 0.195367741935481;0.991751612903224 0.805367741935489 0.192835483870965;0.99046451612903 0.809893548387102 0.190399999999997;0.988906451612901 0.814419354838715 0.188099999999997;0.98718387096774 0.819000000000006 0.185909677419352;0.98534516129032 0.823600000000006 0.183758064516126;0.983409677419352 0.828200000000006 0.181603225806449;0.981332258064514 0.832800000000006 0.179377419354836;0.979203225806449 0.837400000000006 0.177151612903223;0.97702580645161 0.842025806451619 0.174899999999997;0.974799999999997 0.846700000000006 0.172599999999997;0.972722580645159 0.851300000000006 0.170299999999997;0.970741935483868 0.855900000000006 0.168048387096771;0.968880645161288 0.860522580645167 0.16584516129032;0.967174193548385 0.865196774193554 0.163693548387094;0.965680645161288 0.869800000000006 0.161612903225804;0.964332258064515 0.874400000000006 0.15962580645161;0.963109677419353 0.879000000000006 0.157716129032256;0.961996774193547 0.883600000000006 0.155861290322578;0.961154838709676 0.888200000000006 0.154006451612901;0.960506451612902 0.892758064516135 0.152151612903223;0.960019354838709 0.89726774193549 0.150264516129029;0.959648387096774 0.901719354838716 0.148261290322578;0.959535483870968 0.906235483870974 0.146064516129029;0.959577419354839 0.910683870967748 0.143761290322577;0.959751612903226 0.915074193548393 0.141335483870964;0.960048387096775 0.919525806451619 0.138664516129028;0.960529032258065 0.923916129032264 0.135870967741931;0.961154838709678 0.928258064516135 0.132980645161286;0.961906451612904 0.932570967741942 0.129983870967737;0.962722580645162 0.936948387096781 0.126793548387092;0.963654838709679 0.94126774193549 0.123487096774189;0.964683870967744 0.945538709677426 0.120051612903221;0.965809677419357 0.949774193548394 0.116464516129027;0.967070967741937 0.954077419354845 0.112606451612897;0.968387096774196 0.958325806451619 0.108583870967736;0.969751612903228 0.962583870967748 0.104358064516122;0.971161290322583 0.966883870967748 0.0998967741935412;0.972570967741938 0.971112903225813 0.0952225806451541;0.973980645161292 0.975393548387103 0.0903935483870892;0.97541612903226 0.979670967741942 0.0854709677419277;0.9769 0.9839 0.0805],...
    'Layer','top','LineWidth',0.15,'XTick',[-4 -3 -2 -1 0 1 2 3 4],'YTick',...
    [-4 -3 -2 -1 0 1 2 3 4]);
    print('FiguresQJE/Heatmap','-depsc','-painters');
    
end

